<!--
  #%L
  SCIFIO library for reading and converting scientific file formats.
  %%
  Copyright (C) 2011 - 2013 Open Microscopy Environment:
    - Board of Regents of the University of Wisconsin-Madison
    - Glencoe Software, Inc.
    - University of Dundee
  %%
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
  
  1. Redistributions of source code must retain the above copyright notice,
     this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation
     and/or other materials provided with the distribution.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
  
  The views and conclusions contained in the software and documentation are
  those of the authors and should not be interpreted as representing official
  policies, either expressed or implied, of any organization.
  #L%
  -->

<suite name="SCIFIO_Tests" parallel="@PARALLEL@">
    <test name="ByteArrayHandle">
        <parameter name="provider" value="ByteArrayHandle"/>
        <groups>
            <run>
                <include name="readTests"/>
                <include name="writeTests"/>
                <exclude name="readLineTest"/>
            </run>
        </groups>
        <packages>
            <package name="io.scif.io.utests"/>
            <package name="io.scif.common.utests"/>
        </packages>
    </test>
    <test name="NewByteArrayHandle">
        <parameter name="provider" value="NewByteArrayHandle"/>
        <parameter name="checkGrowth" value="true"/>
        <groups>
            <run>
                <include name="writeTests"/>
                <exclude name="initialLengthTest"/>
            </run>
        </groups>
        <packages>
            <package name="io.scif.io.utests"/>
            <package name="io.scif.common.utests"/>
        </packages>
    </test>
    <test name="ExistingByteArrayHandle">
        <parameter name="provider" value="ExistingByteArrayHandle"/>
        <groups>
            <run>
                <include name="writeTests"/>
                <exclude name="initialLengthTest"/>
            </run>
        </groups>
        <packages>
            <package name="io.scif.io.utests"/>
            <package name="io.scif.common.utests"/>
        </packages>
    </test>
    <test name="BZip2Handle">
        <parameter name="provider" value="BZip2Handle"/>
        <groups>
            <run>
                <include name="readTests"/>
                <exclude name="readLineTest"/>
            </run>
        </groups>
        <classes>
            <class name="io.scif.io.utests.ReadOnlyTest"/>
        </classes>
        <packages>
            <package name="io.scif.io.utests"/>
            <package name="io.scif.common.utests"/>
        </packages>
    </test>
    <test name="GZipHandle">
        <parameter name="provider" value="GZipHandle"/>
        <groups>
            <run>
                <include name="readTests"/>
                <exclude name="readLineTest"/>
            </run>
        </groups>
        <classes>
            <class name="io.scif.io.utests.ReadOnlyTest"/>
        </classes>
        <packages>
            <package name="io.scif.io.utests"/>
            <package name="io.scif.common.utests"/>
        </packages>
    </test>
    <test name="NIOFileHandle">
        <parameter name="provider" value="NIOFileHandle"/>
        <groups>
            <run>
                <include name="readTests"/>
                <include name="writeTests"/>
            </run>
        </groups>
        <packages>
            <package name="io.scif.io.utests"/>
            <package name="io.scif.common.utests"/>
        </packages>
    </test>
    <test name="URLHandle">
        <parameter name="provider" value="URLHandle"/>
        <groups>
            <run>
                <include name="readTests"/>
                <exclude name="readLineTest"/>
            </run>
        </groups>
        <classes>
            <class name="io.scif.io.utests.ReadOnlyTest"/>
        </classes>
        <packages>
            <package name="io.scif.io.utests"/>
            <package name="io.scif.common.utests"/>
        </packages>
    </test>
    <test name="ZipHandle">
        <parameter name="provider" value="ZipHandle"/>
        <groups>
            <run>
                <include name="readTests"/>
                <exclude name="readLineTest"/>
            </run>
        </groups>
        <classes>
            <class name="io.scif.io.utests.ReadOnlyTest"/>
        </classes>
        <packages>
            <package name="io.scif.io.utests"/>
            <package name="io.scif.common.utests"/>
        </packages>
    </test>
    <test name="TypeDetection">
        <classes>
            <class name="io.scif.io.utests.TypeDetectionTest"/>
        </classes>
    </test>
    <test name="Location">
        <classes>
            <class name="io.scif.io.utests.LocationTest"/>
        </classes>
    </test>
    <!-- TODO : uncomment this once we have a better way of testing URLs
    <test name="URLHandleTest">
        <classes>
          <class name="io.scif.io.utests.URLHandleTest"/>
        </classes>
    </test>
    -->
    <test name="RandomAccessInputStream">
      <parameter name="provider" value="ByteArrayHandle"/>
      <classes>
        <class name="io.scif.io.utests.RandomAccessInputStreamTest"/>
      </classes>
    </test>
    <test name="RandomAccessInputStreamBZip2">
      <parameter name="provider" value="BZip2Handle"/>
      <classes>
        <class name="io.scif.io.utests.RandomAccessInputStreamTest"/>
      </classes>
    </test>
    <test name="RandomAccessInputStreamExistingByteArray">
      <parameter name="provider" value="ExistingByteArrayHandle"/>
      <classes>
        <class name="io.scif.io.utests.RandomAccessInputStreamTest"/>
      </classes>
    </test>
    <test name="RandomAccessInputStreamGZip">
      <parameter name="provider" value="GZipHandle"/>
      <classes>
        <class name="io.scif.io.utests.RandomAccessInputStreamTest"/>
      </classes>
    </test>
    <test name="RandomAccessInputStreamNIOFile">
      <parameter name="provider" value="NIOFileHandle"/>
      <classes>
        <class name="io.scif.io.utests.RandomAccessInputStreamTest"/>
      </classes>
    </test>
    <test name="RandomAccessInputStreamURL">
      <parameter name="provider" value="URLHandle"/>
      <classes>
        <class name="io.scif.io.utests.RandomAccessInputStreamTest"/>
      </classes>
    </test>
    <test name="RandomAccessInputStreamZip">
      <parameter name="provider" value="ZipHandle"/>
      <classes>
        <class name="io.scif.io.utests.RandomAccessInputStreamTest"/>
      </classes>
    </test>
    <test name="DataTools">
      <classes>
        <class name="io.scif.common.utests.DataToolsTest"/>
      </classes>
    </test>
    <test name="CheckerTest">
    	<classes>
	    	<class name="io.scif.utests.CheckerTest"/>
    	</classes>
    </test>
    <test name="DiscoveryTest">
    	<classes>
	    	<class name="io.scif.discovery.utests.DiscoveryTest"/>
    	</classes>
    </test>
    <test name="FormatTest">
    	<classes>
	    	<class name="io.scif.utests.FormatTest"/>
    	</classes>
    </test>
    <test name="HasColorTableTest">
    	<classes>
	    	<class name="io.scif.utests.HasColorTableTest"/>
    	</classes>
    </test>
    <test name="HasFormatTest">
    	<classes>
	    	<class name="io.scif.utests.HasFormatTest"/>
    	</classes>
    </test>
    <test name="MetadataTest">
    	<classes>
	    	<class name="io.scif.utests.MetadataTest"/>
    	</classes>
    </test>
    <test name="ParserTest">
    	<classes>
	    	<class name="io.scif.utests.ParserTest"/>
    	</classes>
    </test>
    <test name="PlaneTest">
    	<classes>
	    	<class name="io.scif.utests.PlaneTest"/>
    	</classes>
    </test>
    <test name="ReaderTest">
    	<classes>
	    	<class name="io.scif.utests.ReaderTest"/>
    	</classes>
    </test>
    <test name="TranslatorTest">
    	<classes>
	    	<class name="io.scif.utests.TranslatorTest"/>
    	</classes>
    </test>
    <test name="WriterTest">
    	<classes>
	    	<class name="io.scif.utests.WriterTest"/>
    	</classes>
    </test>
    <test name="CellTest">
      <classes>
        <class name="io.scif.img.cell.utests.SCIFIOCellImgFactoryTest"/>
        <class name="io.scif.img.cell.utests.SCIFIOCellCacheTest"/>
      </classes>
    </test>
    <test name="CacheTest">
      <classes>
        <class name="io.scif.img.cell.cache.utests.CacheServiceTest"/>
      </classes>
    </test>
    <test name="ImgOpenerTest">
      <classes>
        <class name="io.scif.img.utests.ImgOpenerTest"/>
      </classes>
    </test>
    <test name="FilterTest">
      <classes>
        <class name="io.scif.filters.utests.FilterTest"/>
        <class name="io.scif.filters.utests.PlaneSeparatorTest"/>
      </classes>
    </test>
    <!--
    <test name="Encoding">
      <classes>
        <class name="io.scif.io.utests.EncodingTest"/>
      </classes>
    </test>
    -->
</suite>
